{  sCurl.pas  Copyright (c) 2019 Paul Davidson. All rights reserved.}unit sCurl;  {$MODE OBJFPC}  {$H+}  {$LINKLIB 'libcurl.dylib'}interface  uses   Classes,   libCurl,   SysUtils,   UNIXType;  type        tCurl = class( TObject )      private         fCurlp  : pCurl;         fStream : TMemoryStream;      public        constructor Create;        destructor  Destroy; override;        function    Get( s : string ) : string;    end;  var    fCurl : tCurl;implementation  uses    sConsole;    function DoWrite( Ptr : Pointer; Size : size_t; nmemb: size_t; Data : Pointer) : size_t; cdecl;  begin   Result:=TStream(Data).Write(Ptr^,Size*nmemb);  end;  // DoWrite  constructor tCurl.Create;  begin    inherited Create;    fStream := TMemoryStream.Create;    fCurlp:= curl_easy_init;  end;  // tCurl.Create;      destructor tCurl.Destroy;  begin    curl_easy_cleanup( fCurlp );    fStream.Free;    inherited Destroy;  end;  // tCurl.Destroy    function tCurl.Get( s : string ) : string;  var    ss : Pchar;    tt : string;  begin    ss := StrAlloc( length( s ) + 1 );    strPCopy( ss, s );    tt := '';    try      if Assigned( fCurlp ) then begin        curl_easy_setopt( fCurlp, CURLOPT_VERBOSE, [ FALSE ] );        curl_easy_setopt( fCurlp, CURLOPT_MAXFILESIZE, [ 1024 * 20 ] );        curl_easy_setopt( fCurlp, CURLOPT_MAXREDIRS, [ 10 ] );        curl_easy_setopt( fCurlp, CURLOPT_CONNECTTIMEOUT, [ 3 ] );        curl_easy_setopt( fCurlp, CURLOPT_TIMEOUT, [ 3 ] );        curl_easy_setopt( fCurlp, CURLOPT_URL, [ ss ] );        curl_easy_setopt( fCurlp, CURLOPT_WRITEFUNCTION, [ @DoWrite ] );        curl_easy_setopt( fCurlp, CURLOPT_WRITEDATA, [ pointer( fStream ) ] );        curl_easy_perform( fCurlp );        fStream.Position := 0;        SetLength( tt, fStream.Size );        fStream.Read( tt[ 1 ], fStream.Size );        fStream.Clear;        curl_easy_reset( fCurlp );      end;    except      on E : Exception do fCon.Send( E.Message + ' ' + E.ClassName, taBold );    end;    strDispose( ss );    Get := tt;  end;  // tCurlGetend.  // sCurl 